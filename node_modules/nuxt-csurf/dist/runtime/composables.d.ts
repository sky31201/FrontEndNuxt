import type { FetchError } from 'ofetch';
import type { NitroFetchRequest, AvailableRouterMethod } from 'nitropack';
import type { Ref } from 'vue';
import type { KeyOfRes, AsyncData, PickFrom } from 'nuxt/dist/app/composables/asyncData';
import type { FetchResult, UseFetchOptions } from 'nuxt/dist/app/composables/fetch';
export declare function useCsrf(): {
    csrf: any;
};
export declare function useCsrfFetch<ResT = void, ErrorT = FetchError, ReqT extends NitroFetchRequest = NitroFetchRequest, Method extends AvailableRouterMethod<ReqT> = 'get' extends AvailableRouterMethod<ReqT> ? 'get' : AvailableRouterMethod<ReqT>, _ResT = ResT extends void ? FetchResult<ReqT, Method> : ResT, Transform extends (res: _ResT) => any = (res: _ResT) => _ResT, PickKeys extends KeyOfRes<Transform> = KeyOfRes<Transform>>(request: Ref<ReqT> | ReqT | (() => ReqT), opts?: UseFetchOptions<_ResT, Transform, PickKeys, ReqT, Method>): AsyncData<PickFrom<ReturnType<Transform>, PickKeys>, ErrorT | null>;
